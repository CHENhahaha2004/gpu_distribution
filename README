source .venv/bin/activate              # 进入虚拟环境

pip install -r requirements.txt

python run_sim.py --gpus 4 --strategy tensor --micro_batches 2 --plot

参数解释：
--gpus 4 使用 4 块 GPU（可改）
--strategy tensor 选择张量并行；也可填 data 或 pipeline
--micro_batches 2 微批数量
--plot 结束后自动弹出甘特图
执行后会生成 trace.csv 并在窗口展示 GPU 计算/通信时间线。


gpu_distribution/
│
├─ run_sim.py                 # 入口脚本
├─ requirements.txt           # 依赖列表
│
├─ simulator/                 # 资源层：GPU 等
│   ├─ __init__.py
│   └─ gpu.py                 # GPU 类 (compute / send) —— “计算节点”
│
├─ net_model/                 # 网络层：可插拔的通信模型
│   ├─ __init__.py
│   ├─ base.py                # BaseNetModel 抽象：定义 transfer() 接口
│   └─ ideal.py               # IdealNet：size / bw，0 拥塞 —— Phase-1.1 默认
│   # (未来) rdma.py          # 带宽共享、排队、延迟 —— Phase-1.2/1.3
│
├─ strategy/                  # 并行策略层：调度逻辑
│   ├─ __init__.py            # 注册表 & get_strategy 工厂函数
│   ├─ base.py                # ParallelStrategy 抽象：run() 生成器
│   ├─ data_parallel.py       # 数据并行  (DP)
│   ├─ tensor_parallel.py     # 张量并行 (TP)
│   └─ pipeline_parallel.py   # 流水线并行 (PP)
│
├─ trace/                     # 观测/记录层
│   ├─ __init__.py
│   └─ recorder.py            # Recorder：log() + to_csv()
│
├─ visualization/             # 可视化工具层
│   ├─ __init__.py
│   └─ plot.py                # plot_gantt()：读取 CSV → 甘特图
└─